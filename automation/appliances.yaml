## appliances.yaml automation

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Subwoofer
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
- alias: "Subwoofer ON"
  trigger:
    - platform: state
      entity_id: media_player.lounge_main
      to: 'idle'
    - platform: state
      entity_id: media_player.lounge_main
      to: 'playing'
  action:
    - service: switch.turn_on
      entity_id: switch.subwoofer

- alias: "Subwoofer OFF"
  trigger:
    platform: state
    entity_id: media_player.lounge_main
    to: 'off'
    for: "00:00:30"
  action:
    - service: switch.turn_off
      entity_id: switch.subwoofer

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Dryer
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
- alias: "Dryer State - Door"
  trigger:
    platform: numeric_state
    entity_id: sensor.dryer_watts
    above: 5
    below: 20
    for:
      seconds: 2
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/dryer
        payload: 'Door Open'
        retain: 'true'
- alias: "Dryer State - Drying"
  trigger:
    platform: numeric_state
    entity_id: sensor.dryer_watts
    above: 50
    for:
      seconds: 2
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/dryer
        payload: 'Drying'
        retain: 'true'
- alias: "Dryer State - Idle"
  trigger:
    platform: numeric_state
    entity_id: sensor.dryer_watts
    below: 6
    for:
      seconds: 60
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/dryer
        payload: 'Idle'
        retain: 'true'
- alias: "Dryer Finished"
  trigger:
    platform: state
    entity_id: sensor.dryer_state
    from: 'Drying'
    to: 'Idle'
  action:
    - service: script.turn_on
      entity_id: script.notify_all
      data:
        variables:
          message: 'Dryer finished!'
    - service: script.announce
      data:
        sonos_entity: media_player.kitchen
#        volume: 0.4
        message: 'The Dryer has finished'
        delay: '00:00:03'
        not_at_night: yes
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Washing Machine
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# - alias: 'Washer State - Door'
#   trigger:
#     platform: numeric_state
#     entity_id: sensor.washer_watts
#     above: 5
#     below: 20
#     for:
#       seconds: 2
#   action:
#     - service: mqtt.publish
#       data:
#         topic: hass/state/washer
#         payload: 'Door Open'
#         retain: 'true'
- alias: "Washer State - Washing"
  trigger:
    platform: numeric_state
    entity_id: sensor.washer_watts
    above: 30
    for:
      seconds: 2
# Make sure washer isn't already running and delaying between cycles - don't re-trigger and cause stopwatch reset
  condition:
    condition: template
    value_template: "{{ states.sensor.washer_state.state != 'Washing' }}"
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/washer
        payload: 'Washing'
        retain: 'true'
- alias: "Washer State - Idle"
  trigger:
    platform: numeric_state
    entity_id: sensor.washer_watts
    below: 6
    for:
      minutes: 2
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/washer
        payload: 'Idle'
        retain: 'true'
- alias: "Washing Machine Finished"
  trigger:
    platform: state
    entity_id: sensor.washer_state
    from: 'Washing'
    to: 'Idle'
  action:
    - service: script.turn_on
      entity_id: script.notify_all
      data:
        variables:
          message: 'Washing Machine finished!'
    - service: script.announce
      data:
        sonos_entity: media_player.kitchen
#        volume: 0.4
        message: 'The Washing machine has finished'
        delay: '00:00:04'
        not_at_night: yes

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Dishwasher
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
- alias: "Dishwasher State - Washing"
  trigger:
    platform: numeric_state
    entity_id: sensor.dishwasher_watts
    above: 30
    for:
      seconds: 2
# # Make sure dishwasher isn't already running and delaying between cycles - don't re-trigger and cause stopwatch reset
#   condition:
#     condition: template
#     value_template: "{{ states.sensor.dishwasher_state.state != 'Washing' }}"
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/dishwasher
        payload: 'Washing'
        retain: 'true'
- alias: "Dishwasher State - Idle"
  trigger:
    platform: numeric_state
    entity_id: sensor.dishwasher_watts
    below: 5
    for:
      minutes: 10
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/dishwasher
        payload: 'Idle'
        retain: 'true'
- alias: "Dishwasher Finished"
  trigger:
    platform: state
    entity_id: sensor.dishwasher_state
    from: 'Washing'
    to: 'Idle'
  action:
    - service: script.turn_on
      entity_id: script.notify_all
      data:
        variables:
          message: 'Dishwasher finished!'
    - service: script.announce
      data:
        sonos_entity: media_player.kitchen
#        volume: 0.4
        message: 'The Dishwasher has finished'
        delay: '00:00:03'
        not_at_night: yes
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Breadmaker
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
## MQTT publish states
- alias: "Breadmaker On"
  trigger:
    - platform: state
      entity_id: switch.breadmaker
      to: 'On'
      from: 'Off'
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/breadmaker
        payload: 'Idle'
        retain: 'true'
- alias: "Breadmaker State - Idle"
  trigger:
    - platform: numeric_state
      entity_id: sensor.breadmaker_watts
      above: 0
      below: 5
      for:
        seconds: 60
  condition:
    condition: template
    value_template: "{{ states.sensor.breadmaker_state.state != 'Operating' and states.sensor.breadmaker_state.state != 'Cooking' }}"
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/breadmaker
        payload: 'Idle'
        retain: 'true'
- alias: "Breadmaker State - Operating"
  trigger:
    platform: numeric_state
    entity_id: sensor.breadmaker_watts
    above: 3
    # below: 100
    # for:
    #   seconds: 2
# # Make sure breadmaker isn't already running and delaying between heating cycles - don't re-trigger and cause stopwatch reset
  condition:
    condition: template
    value_template: "{{ states.sensor.breadmaker_state.state == 'Idle' }}"
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/breadmaker
        payload: 'Operating'
        retain: 'true'
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.breadmaker_start
      data:
        date: "{{ now().strftime('%Y-%m-%d') }}"
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.breadmaker_state
- alias: "Breadmaker State - Cooking"
  trigger:
    platform: numeric_state
    entity_id: sensor.breadmaker_watts
    above: 500
    for:
      seconds: 45
# # Make sure breadmaker isn't already cooking and delaying between heating cycles - don't re-trigger and cause stopwatch reset
  condition:
    condition: template
    value_template: "{{ states.sensor.breadmaker_state.state == 'Operating' }}"
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/breadmaker
        payload: 'Cooking'
        retain: 'true'
- alias: "Breadmaker State - Finished"
  trigger:
    platform: numeric_state
    entity_id: sensor.breadmaker_watts
    below: 500
    for:
      minutes: 4
# # Make sure breadmaker isn't already cooking and delaying between heating cycles - don't re-trigger and cause stopwatch reset
  condition:
    condition: template
    value_template: "{{ states.sensor.breadmaker_state.state == 'Cooking' }}"
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/breadmaker
        payload: 'Finished'
        retain: 'true'
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.breadmaker_state
- alias: "Breadmaker Off"
  trigger:
    - platform: state
      entity_id: switch.breadmaker
      to: 'off'
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/breadmaker
        payload: 'Off'
        retain: 'true'
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.breadmaker_state
## Breadmaker - Actions for each published state
- alias: "Breadmaker Cooking"
  trigger:
    - platform: state
      entity_id: sensor.breadmaker_state
      to: 'Cooking'
  action:
    - service: script.turn_on
      entity_id: script.notify_darren
      data:
        variables:
          message: 'Breadmaker starting Cook mode!'
    - service: script.announce
      data:
        sonos_entity: media_player.kitchen
#        volume: 0.4
        message: 'The Breadmaker is at the bake stage'
        delay: '00:00:04'
        not_at_night: yes
- alias: "Breadmaker Finished"
  trigger:
    - platform: state
      entity_id: sensor.breadmaker_state
      to: 'Finished'
      from: 'Cooking'
  action:
    - service: script.turn_on
      entity_id: script.notify_darren
      data:
        variables:
          message: 'Breadmaker finished!'
    - service: script.announce
      data:
        sonos_entity: media_player.kitchen
#        volume: 0.4
        message: 'The Breadmaker has finished'
        delay: '00:00:03'
        not_at_night: yes
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.breadmaker_state
# ## set breadmaker on time
# - alias: "Breadmaker Off"
#   trigger:
#     - platform: state
#       entity_id: input_boolean.breadmaker_state
#       from: 'off'
#       to: 'on'
#   action:
#     - service: input_datetime.set_datetime
#       target:
#         entity_id: input_datetime.breadmaker_start
#       data:
#         datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
## update breadmaker sensor when on

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Turntable
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
- alias: "Turntable State - On"
  trigger:
    platform: numeric_state
    entity_id: sensor.turntable_watts
    above: 5
    # for:
    #   seconds: 10
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/turntable
        payload: 'On'
        retain: 'true'

- alias: "Turntable State - Off"
  trigger:
    platform: numeric_state
    entity_id: sensor.turntable_watts
    below: 4
    for: "00:00:03"
  action:
    - service: mqtt.publish
      data:
        topic: hass/state/turntable
        payload: 'Off'
        retain: 'true'

- alias: "Turntable On - Amp On"
  trigger:
    platform: state
    entity_id: sensor.turntable_state
    from: 'Off'
    to: 'On'
  action:
    - service: media_player.turn_on
      data:
        entity_id: media_player.lounge
    - delay:
        seconds: 5
    - service: media_player.select_source
      data:
        entity_id: media_player.lounge_main
        source: 'audio3'

- alias: "Turntable Off - Amp Off"
  trigger:
    platform: state
    entity_id: sensor.turntable_state
    from: 'On'
    to: 'Off'
  action:
    - service: media_player.turn_off
      data:
        entity_id: media_player.lounge

- alias: "Turntable Turned On"
  trigger:
    - platform: state
      entity_id: sensor.turntable_state
      from: 'Off'
      to: 'On'
  action:
    - service: script.turn_on
      entity_id: script.notify_darren
      data:
        variables:
          message: 'Turntable On!'

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Still ON notifications
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

- alias: "Turntable Still On"
  trigger:
    - platform: time_pattern
      # Trigger every hour, on the hour
      # hours: "/1"
      minutes: "/30"
    - platform: state
      entity_id: input_select.house_mode
      to: 'Bedtime'
  condition:
    condition: state
    entity_id: sensor.turntable_state
    state: 'On'
  action:
    - service: script.turn_on
      entity_id: script.notify_darren
      data:
        variables:
          message: 'Turntable still on!'

- alias: "Deck Heater Still On"
  trigger:
    - platform: time_pattern
      # Trigger every hour, on the hour
      # hours: "/1"
      minutes: "/30"
    - platform: state
      entity_id: input_select.house_mode
      to: 'Bedtime'
  condition:
    condition: state
    entity_id: switch.deck_heater
    state: 'On'
  action:
    - service: script.turn_on
      entity_id: script.notify_all
      data:
        variables:
          message: 'Deck Heater still on!'

- alias: "Deck Heater Turned On"
  mode: restart # due to the wait at the end for the actionable notification
  trigger:
    - platform: state
      entity_id: switch.deck_heater
      to: "on"
  action:
    - service: script.announce
      data:
        sonos_entity: media_player.kitchen
#        volume: 0.4
        message: 'The Deck heater has been turned on'
        delay: '00:00:04'
        not_at_night: no
    - service: logbook.log
      data_template:
        name: 'Deck Heater:'
        message: "Deck Heater turned on"
    - alias: "Set up variables for the actions"
      variables:
        # Including an id in the action allows us to identify this script run
        # and not accidentally trigger for other notification actions
        action_deck_heater_off: "{{ 'DECK_HEAT_OFF' ~ context.id }}"
    - alias: "Ask for actions"
      service: notify.mobile_app_darren_reynolds
      data:
        title: "Deck Heater"
        message: "Turned ON, Turn off?"
        data:
          actions:
            - action: "{{ action_deck_heater_off }}"
              title: "Turn OFF"
    - alias: "Wait for a response"
      wait_for_trigger:
        - platform: event
          event_type: mobile_app_notification_action
          event_data:
            # waiting for the specific action avoids accidentally continuing
            # for another script/automation's notification action
            action: "{{ action_deck_heater_off }}"
      timeout: "00:30:00"
      continue_on_timeout: false
    - alias: "Perform the action"
      choose:
        - conditions: "{{ wait.trigger.event.data.action == action_deck_heater_off }}"
          sequence:
            - service: switch.turn_off
              target:
                entity_id: switch.deck_heater
